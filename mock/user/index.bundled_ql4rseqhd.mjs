// mock/user/index.ts
import { config } from "@/config/axios/config";
var { result_code } = config;
var timeout = 1e3;
var List = [
  {
    username: "admin",
    password: "admin",
    role: "admin",
    roleId: "1",
    permissions: ["*.*.*"]
  },
  {
    username: "test",
    password: "test",
    role: "test",
    roleId: "2",
    permissions: ["example:dialog:create", "example:dialog:delete"]
  }
];
var user_default = [
  // 列表接口
  {
    url: "/user/list",
    method: "get",
    response: ({ query }) => {
      const { username, pageIndex, pageSize } = query;
      const mockList = List.filter((item) => {
        if (username && item.username.indexOf(username) < 0)
          return false;
        return true;
      });
      const pageList = mockList.filter(
        (_, index) => index < pageSize * pageIndex && index >= pageSize * (pageIndex - 1)
      );
      return {
        code: result_code,
        data: {
          total: mockList.length,
          list: pageList
        }
      };
    }
  },
  // 登录接口
  {
    url: "/user/login",
    method: "post",
    timeout,
    response: ({ body }) => {
      const data = body;
      let hasUser = false;
      for (const user of List) {
        if (user.username === data.username && user.password === data.password) {
          hasUser = true;
          return {
            code: result_code,
            data: user
          };
        }
      }
      if (!hasUser) {
        return {
          code: "500",
          message: "\u8D26\u53F7\u6216\u5BC6\u7801\u9519\u8BEF"
        };
      }
    }
  },
  // 退出接口
  {
    url: "/user/loginOut",
    method: "get",
    timeout,
    response: () => {
      return {
        code: result_code,
        data: null
      };
    }
  }
];
export {
  user_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibW9jay91c2VyL2luZGV4LnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJjb25zdCBfX2luamVjdGVkX2ZpbGVuYW1lX18gPSBcIkQ6XFxcXGFcdTVCNjZcdTRFNjBcXFxcMS5cdTVCNjZcdTRFNjBcdTk4NzlcdTc2RUVcXFxcNC5cdTVCNjZcdTRFNjBcdThCQjBcdTVGNTVcXFxcbW9ja1xcXFx1c2VyXFxcXGluZGV4LnRzXCI7Y29uc3QgX19pbmplY3RlZF9kaXJuYW1lX18gPSBcIkQ6XFxcXGFcdTVCNjZcdTRFNjBcXFxcMS5cdTVCNjZcdTRFNjBcdTk4NzlcdTc2RUVcXFxcNC5cdTVCNjZcdTRFNjBcdThCQjBcdTVGNTVcXFxcbW9ja1xcXFx1c2VyXCI7Y29uc3QgX19pbmplY3RlZF9pbXBvcnRfbWV0YV91cmxfXyA9IFwiZmlsZTovLy9EOi9hJUU1JUFEJUE2JUU0JUI5JUEwLzEuJUU1JUFEJUE2JUU0JUI5JUEwJUU5JUExJUI5JUU3JTlCJUFFLzQuJUU1JUFEJUE2JUU0JUI5JUEwJUU4JUFFJUIwJUU1JUJEJTk1L21vY2svdXNlci9pbmRleC50c1wiO2ltcG9ydCB7IGNvbmZpZyB9IGZyb20gJ0AvY29uZmlnL2F4aW9zL2NvbmZpZydcclxuaW1wb3J0IHsgTW9ja01ldGhvZCB9IGZyb20gJ3ZpdGUtcGx1Z2luLW1vY2snXHJcblxyXG5jb25zdCB7IHJlc3VsdF9jb2RlIH0gPSBjb25maWdcclxuXHJcbmNvbnN0IHRpbWVvdXQgPSAxMDAwXHJcblxyXG5jb25zdCBMaXN0OiB7XHJcbiAgdXNlcm5hbWU6IHN0cmluZ1xyXG4gIHBhc3N3b3JkOiBzdHJpbmdcclxuICByb2xlOiBzdHJpbmdcclxuICByb2xlSWQ6IHN0cmluZ1xyXG4gIHBlcm1pc3Npb25zOiBzdHJpbmcgfCBzdHJpbmdbXVxyXG59W10gPSBbXHJcbiAge1xyXG4gICAgdXNlcm5hbWU6ICdhZG1pbicsXHJcbiAgICBwYXNzd29yZDogJ2FkbWluJyxcclxuICAgIHJvbGU6ICdhZG1pbicsXHJcbiAgICByb2xlSWQ6ICcxJyxcclxuICAgIHBlcm1pc3Npb25zOiBbJyouKi4qJ11cclxuICB9LFxyXG4gIHtcclxuICAgIHVzZXJuYW1lOiAndGVzdCcsXHJcbiAgICBwYXNzd29yZDogJ3Rlc3QnLFxyXG4gICAgcm9sZTogJ3Rlc3QnLFxyXG4gICAgcm9sZUlkOiAnMicsXHJcbiAgICBwZXJtaXNzaW9uczogWydleGFtcGxlOmRpYWxvZzpjcmVhdGUnLCAnZXhhbXBsZTpkaWFsb2c6ZGVsZXRlJ11cclxuICB9XHJcbl1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFtcclxuICAvLyBcdTUyMTdcdTg4NjhcdTYzQTVcdTUzRTNcclxuICB7XHJcbiAgICB1cmw6ICcvdXNlci9saXN0JyxcclxuICAgIG1ldGhvZDogJ2dldCcsXHJcbiAgICByZXNwb25zZTogKHsgcXVlcnkgfSkgPT4ge1xyXG4gICAgICBjb25zdCB7IHVzZXJuYW1lLCBwYWdlSW5kZXgsIHBhZ2VTaXplIH0gPSBxdWVyeVxyXG5cclxuICAgICAgY29uc3QgbW9ja0xpc3QgPSBMaXN0LmZpbHRlcigoaXRlbSkgPT4ge1xyXG4gICAgICAgIGlmICh1c2VybmFtZSAmJiBpdGVtLnVzZXJuYW1lLmluZGV4T2YodXNlcm5hbWUpIDwgMCkgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgfSlcclxuICAgICAgY29uc3QgcGFnZUxpc3QgPSBtb2NrTGlzdC5maWx0ZXIoXHJcbiAgICAgICAgKF8sIGluZGV4KSA9PiBpbmRleCA8IHBhZ2VTaXplICogcGFnZUluZGV4ICYmIGluZGV4ID49IHBhZ2VTaXplICogKHBhZ2VJbmRleCAtIDEpXHJcbiAgICAgIClcclxuXHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgY29kZTogcmVzdWx0X2NvZGUsXHJcbiAgICAgICAgZGF0YToge1xyXG4gICAgICAgICAgdG90YWw6IG1vY2tMaXN0Lmxlbmd0aCxcclxuICAgICAgICAgIGxpc3Q6IHBhZ2VMaXN0XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSxcclxuICAvLyBcdTc2N0JcdTVGNTVcdTYzQTVcdTUzRTNcclxuICB7XHJcbiAgICB1cmw6ICcvdXNlci9sb2dpbicsXHJcbiAgICBtZXRob2Q6ICdwb3N0JyxcclxuICAgIHRpbWVvdXQsXHJcbiAgICByZXNwb25zZTogKHsgYm9keSB9KSA9PiB7XHJcbiAgICAgIGNvbnN0IGRhdGEgPSBib2R5XHJcbiAgICAgIGxldCBoYXNVc2VyID0gZmFsc2VcclxuICAgICAgZm9yIChjb25zdCB1c2VyIG9mIExpc3QpIHtcclxuICAgICAgICBpZiAodXNlci51c2VybmFtZSA9PT0gZGF0YS51c2VybmFtZSAmJiB1c2VyLnBhc3N3b3JkID09PSBkYXRhLnBhc3N3b3JkKSB7XHJcbiAgICAgICAgICBoYXNVc2VyID0gdHJ1ZVxyXG4gICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgY29kZTogcmVzdWx0X2NvZGUsXHJcbiAgICAgICAgICAgIGRhdGE6IHVzZXJcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgaWYgKCFoYXNVc2VyKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgIGNvZGU6ICc1MDAnLFxyXG4gICAgICAgICAgbWVzc2FnZTogJ1x1OEQyNlx1NTNGN1x1NjIxNlx1NUJDNlx1NzgwMVx1OTUxOVx1OEJFRidcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9LFxyXG4gIC8vIFx1OTAwMFx1NTFGQVx1NjNBNVx1NTNFM1xyXG4gIHtcclxuICAgIHVybDogJy91c2VyL2xvZ2luT3V0JyxcclxuICAgIG1ldGhvZDogJ2dldCcsXHJcbiAgICB0aW1lb3V0LFxyXG4gICAgcmVzcG9uc2U6ICgpID0+IHtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBjb2RlOiByZXN1bHRfY29kZSxcclxuICAgICAgICBkYXRhOiBudWxsXHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbl0gYXMgTW9ja01ldGhvZFtdXHJcbiJdLAogICJtYXBwaW5ncyI6ICI7QUFBd1QsU0FBUyxjQUFjO0FBRy9VLElBQU0sRUFBRSxZQUFZLElBQUk7QUFFeEIsSUFBTSxVQUFVO0FBRWhCLElBQU0sT0FNQTtBQUFBLEVBQ0o7QUFBQSxJQUNFLFVBQVU7QUFBQSxJQUNWLFVBQVU7QUFBQSxJQUNWLE1BQU07QUFBQSxJQUNOLFFBQVE7QUFBQSxJQUNSLGFBQWEsQ0FBQyxPQUFPO0FBQUEsRUFDdkI7QUFBQSxFQUNBO0FBQUEsSUFDRSxVQUFVO0FBQUEsSUFDVixVQUFVO0FBQUEsSUFDVixNQUFNO0FBQUEsSUFDTixRQUFRO0FBQUEsSUFDUixhQUFhLENBQUMseUJBQXlCLHVCQUF1QjtBQUFBLEVBQ2hFO0FBQ0Y7QUFFQSxJQUFPLGVBQVE7QUFBQTtBQUFBLEVBRWI7QUFBQSxJQUNFLEtBQUs7QUFBQSxJQUNMLFFBQVE7QUFBQSxJQUNSLFVBQVUsQ0FBQyxFQUFFLE1BQU0sTUFBTTtBQUN2QixZQUFNLEVBQUUsVUFBVSxXQUFXLFNBQVMsSUFBSTtBQUUxQyxZQUFNLFdBQVcsS0FBSyxPQUFPLENBQUMsU0FBUztBQUNyQyxZQUFJLFlBQVksS0FBSyxTQUFTLFFBQVEsUUFBUSxJQUFJO0FBQUcsaUJBQU87QUFDNUQsZUFBTztBQUFBLE1BQ1QsQ0FBQztBQUNELFlBQU0sV0FBVyxTQUFTO0FBQUEsUUFDeEIsQ0FBQyxHQUFHLFVBQVUsUUFBUSxXQUFXLGFBQWEsU0FBUyxZQUFZLFlBQVk7QUFBQSxNQUNqRjtBQUVBLGFBQU87QUFBQSxRQUNMLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxVQUNKLE9BQU8sU0FBUztBQUFBLFVBQ2hCLE1BQU07QUFBQSxRQUNSO0FBQUEsTUFDRjtBQUFBLElBQ0Y7QUFBQSxFQUNGO0FBQUE7QUFBQSxFQUVBO0FBQUEsSUFDRSxLQUFLO0FBQUEsSUFDTCxRQUFRO0FBQUEsSUFDUjtBQUFBLElBQ0EsVUFBVSxDQUFDLEVBQUUsS0FBSyxNQUFNO0FBQ3RCLFlBQU0sT0FBTztBQUNiLFVBQUksVUFBVTtBQUNkLGlCQUFXLFFBQVEsTUFBTTtBQUN2QixZQUFJLEtBQUssYUFBYSxLQUFLLFlBQVksS0FBSyxhQUFhLEtBQUssVUFBVTtBQUN0RSxvQkFBVTtBQUNWLGlCQUFPO0FBQUEsWUFDTCxNQUFNO0FBQUEsWUFDTixNQUFNO0FBQUEsVUFDUjtBQUFBLFFBQ0Y7QUFBQSxNQUNGO0FBQ0EsVUFBSSxDQUFDLFNBQVM7QUFDWixlQUFPO0FBQUEsVUFDTCxNQUFNO0FBQUEsVUFDTixTQUFTO0FBQUEsUUFDWDtBQUFBLE1BQ0Y7QUFBQSxJQUNGO0FBQUEsRUFDRjtBQUFBO0FBQUEsRUFFQTtBQUFBLElBQ0UsS0FBSztBQUFBLElBQ0wsUUFBUTtBQUFBLElBQ1I7QUFBQSxJQUNBLFVBQVUsTUFBTTtBQUNkLGFBQU87QUFBQSxRQUNMLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxNQUNSO0FBQUEsSUFDRjtBQUFBLEVBQ0Y7QUFDRjsiLAogICJuYW1lcyI6IFtdCn0K
